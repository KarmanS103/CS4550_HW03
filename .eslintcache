[{"/Users/karmansingh/Desktop/CS4550/cs4450_hw03/src/index.js":"1","/Users/karmansingh/Desktop/CS4550/cs4450_hw03/src/App.js":"2","/Users/karmansingh/Desktop/CS4550/cs4450_hw03/src/reportWebVitals.js":"3","/Users/karmansingh/Desktop/CS4550/cs4450_hw03/src/game.js":"4"},{"size":500,"mtime":1612234432400,"results":"5","hashOfConfig":"6"},{"size":3742,"mtime":1612581445703,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1612234432400,"results":"8","hashOfConfig":"6"},{"size":2369,"mtime":1612581381813,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1r80y3l",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"/Users/karmansingh/Desktop/CS4550/cs4450_hw03/src/index.js",[],["21","22"],"/Users/karmansingh/Desktop/CS4550/cs4450_hw03/src/App.js",["23"],"import { useState } from 'react';\nimport { generate_secret, checkguess, validateGuess } from './game'\nimport logo from './logo.svg';\nimport './App.css';\n\n/**\n * Pieces of this code were based on the logic described in Professor Tuck's Lecture 4 and 5 code as \n * well as the official React and MDN Documentation.\n */\n\n/**\n * Design Decisions: \n * Once 4 characters are inputted, the guess must be submitted.\n * Invalid guesses do not affect the number of lives. \n * A valid guess is any sequence of four unique digits.\n * \n */\n\n /**\n  * Given the list of guesses, calculates the bull and cow score and adds the guess and score\n  * to the table of guesses and corresponding results. \n  * Attribution: Nat Tuck's Hangman Code. \n  * \n  * @param {*} guesses all of the valid guesses inputted by the user\n  */\nfunction Guesses(guesses) {\n  let keys = Object.keys(guesses[\"guesses\"])\n  let values = []\n\n  keys.forEach(key => values.push(guesses[\"guesses\"][key]))\n\n  let double = []\n  for (let i = 0; i < keys.length; i++) {\n    double.push(<tr>\n      <td>\n        {keys[i]}\n      </td>\n      <td>\n        {values[i]}\n      </td>\n    </tr>)\n  }\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Guess</th>\n          <th>Result</th>\n        </tr>\n      </thead>\n      <tbody>\n        {double}\n      </tbody>\n    </table>\n  )\n}\n\nfunction App() {\n  const [secret, setSecret] = useState(generate_secret());\n  const [guesses, setGuesses] = useState({});\n  const [lives, setLives] = useState(8);\n  const [text, setText] = useState(\"\");\n  const [validguess, setValidGuess] = useState(true);\n  const [won, setWon] = useState(false);\n  const [lose, setLose] = useState(false);\n\n  function guess() {\n    let guessval = validateGuess(text);\n    setValidGuess(guessval);\n\n    if (guessval) {\n      if (text === secret) {\n        setWon(true);\n      }\n\n      if (lives === 1) {\n        setLose(true);\n      }\n\n      let gss = checkguess(guesses, text, secret);\n      setGuesses(gss)\n      setText(\"\")\n      setLives(8 - Object.keys(gss).length)\n    }\n\n    setText(\"\")\n  }\n\n  /**\n   * Based on Nat Tuck's Hangman Code.\n   */\n  function updateText(ev) {\n    let txt = ev.target.value;\n\n    if (text.length >= 4) {\n      return\n    } else {\n      setText(txt)\n    }\n  }\n\n  /**\n   * Attribution: Nat Tuck's Hangman Code. \n   * \n   * @param {*} ev keyPressed Event\n   */\n  function keyPressed(ev) {\n    if (ev.key === \"Enter\") {\n      guess();\n    }\n  }\n\n  function reset() {\n    setSecret(generate_secret());\n    setGuesses([]);\n    setLives(8);\n    setText(\"\")\n    setValidGuess(true)\n    setWon(false);\n    setLose(false);\n  }\n\n  if (won) {\n    return (\n      <div className=\"App\">\n        <h1>You win!</h1>\n        <button onClick={reset}>Reset</button>\n      </div>\n    );\n  }\n\n  if (lose) {\n    return (\n      <div className=\"App\">\n        <h1>Game Over!</h1>\n        <button onClick={reset}>Reset</button>\n      </div>\n    );\n  }\n\n  if (validguess) {\n    return (\n      <div className=\"App\">\n        <h2>Lives: {lives} </h2>\n        <Guesses guesses={guesses}></Guesses><br></br>\n        <input type=\"text\" value={text} onChange={updateText} onKeyPress={keyPressed} />\n        <br></br><br></br>\n        <button onClick={guess}>Guess</button>\n        <button onClick={reset}>Reset</button>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"App\">\n        <h1>Invalid Guess Given!</h1>\n        <h2>Lives: {lives} </h2>\n        <Guesses guesses={guesses}></Guesses><br></br>\n        <input type=\"text\" value={text} onChange={updateText} onKeyPress={keyPressed} />\n        <br></br><br></br>\n        <button onClick={guess}>Guess</button>\n        <button onClick={reset}>Reset</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/Users/karmansingh/Desktop/CS4550/cs4450_hw03/src/reportWebVitals.js",[],"/Users/karmansingh/Desktop/CS4550/cs4450_hw03/src/game.js",["24"],"/**\n * Generates a random sequence of 4 unique digits.\n */\nexport function generate_secret() {\n    let secret = ''\n    while (secret.length < 4) {\n        let temp = Math.floor(Math.random() * 10);\n        if (!secret.includes(temp)) {\n            secret = secret + temp;\n        }\n    }\n\n    return secret;\n}\n\n/**\n * Calculates how many bulls and cows are in the given guess and appends it to the dictionary containing\n * all guesses and their corressponding bull/cow score.\n * \n * A dictionary is used to automatically eliminate duplicate guesses. \n * \n * @param {*} guesses dictionary of guesses and corresponding bull/cow score\n * @param {*} guess current guess being scored\n * @param {*} secret the secret value being compared against\n */\nexport function checkguess(guesses, guess, secret) {\n    let bulls = 0;\n    let bullvalues = [];\n    let cows = 0;\n\n    for (let i = 0; i < secret.length; i++) {\n        if (secret[i] === guess[i]) {\n            bulls += 1;\n            bullvalues.push(secret[i]);\n        }\n    }\n\n    for (let i = 0; i < secret.length; i++) {\n        if ((guess.includes(secret[i])) && (!bullvalues.includes(secret[i]))) {\n            cows += 1;\n        }\n    }\n\n    guesses[guess] = bulls + \" Bulls \" + cows + \" Cows \";\n    return guesses;\n}\n\n/**\n * Checks to make sure the inputted guess by the user is 4 unique digits.\n * \n * @param {*} text guess inputted by the user\n */\nexport function checkUnique(text){\n    let temp = true;\n    let check_list = [];\n    \n    for(let i = 0; i < 10; i ++) {\n        check_list.push(false);\n    }\n\n    for(let i = 0; i<text.length; i++) {\n        if (check_list[text[i]] == true) {\n            temp = false;\n        } else {\n            check_list[text[i]] = true;\n        }\n    }\n\n    return temp\n}\n\n/**\n * Checks to make sure the guess inputted by the user is 4 characters long, composed of only digits, and all \n * 4 characters are unique. \n * \n * @param {*} text guess inputted by the user\n */\nexport function validateGuess(text) {\n    let valid = true;\n    let valid_char = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\n\n    if (text.length !== 4) {\n        valid = false;\n    }\n\n    for (let i = 0; i < text.length; i++) {\n        if (!valid_char.includes(text[i])) {\n            valid = false;\n        }\n    }\n\n    if (!checkUnique(text)) {\n        valid = false;\n    }\n\n    return valid;\n}",{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":3,"column":8,"nodeType":"31","messageId":"32","endLine":3,"endColumn":12},{"ruleId":"33","severity":1,"message":"34","line":62,"column":33,"nodeType":"35","messageId":"36","endLine":62,"endColumn":35},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]